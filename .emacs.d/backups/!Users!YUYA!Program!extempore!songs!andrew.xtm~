;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                      ;;
;;  https://extemporelang.github.io/                    ;;
;;                                                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(begin (sys:load "libs/core/instruments.xtm")
       (sys:load "libs/external/instruments_ext.xtm")
       (sys:load "libs/my/synth.xtm")
       (sys:load "libs/my/fmsynth.xtm")
       (sys:load "libs/my/piano.xtm")
       (sys:load "libs/my/drums.xtm"))

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (+ (synth in time chan dat)
       (drums in time chan dat)
       (piano in time chan dat)
       (fmsynth in time chan dat))))
(dsp:set! dsp)


(define root 52)
(define drum-seq)
(define left-hand
  (lambda (beat ps ds)
    (if (= 0 (modulo beat 8))
        (set! root (random (remove root (list 48 43)))))
    (play 1/2 piano root 160 (car ds))
    (play piano (car ps) 160 (car ds))
    (callback (*metro* (+ beat (* .5 (car ds)))) 'left-hand (+ beat (car ds))
              (rotate ps -1)
              (rotate ds -1))))

(left-hand (*metro* 'get-beat 4) '(55 55 57 59) '(1))

(define scale (pc:scale 4 'aeolian))
(define right-hand
  (lambda (beat dur)
  (play piano
        (pc:quantize (cosr (+ root 36) (cosr 5 3 1/2) 7/3) scale)
        ;;(pc:quantize (cosr (+ root 36) (cosr 5 3 1/2) 7/3) '(11 6 15))
        (+ 90 (cosr 80 20 7/3))
        (* 2.0 dur))
  (if (> (random) .6)
      (play fmsynth
            (pc:quantize (+ 7 (cosr (+ root 24) (cosr 5 3 1/2) 7/3)) scale)
            (cosr 80 20 7/3)
            (* .2 dur) 0.5 5.0))
  (callback (*metro* (+ beat (* .5 dur))) 'right-hand (+ beat dur) dur)))

(right-hand (*metro* 'get-beat 4) 1/4)

(define bassline
  (lambda (beat ps ds)
    (play fmsynth root 80 (* (car ps) (car ds)) 1.0 0.5)
    (callback (*metro* (+ beat (* .95 (car ds)))) 'bassline (+ beat (car ds))
              (rev-rotate ps)
              (rev-rotate ds))))

(bassline (*metro* 'get-beat 4) (list .25 .25 .6) '(3/2 1 3/2))

(define kick)
  (lambda (beat dur)
    ;;(play drums *gm-kick* 155 100 dur)
    (play -1/4 drums *gm-kick* 115 80 (* .5 dur))
    (callback (*metro* (+ beat (* .5 dur))) 'kick (+ beat dur) dur)))

(kick (*metro* 'get-beat 4) 1)

(define hats
  (lambda (beat dur)
    (play drums *gm-closed-hi-hat* (random '(48 44)) (cosr 60 50 (random '(7/3 5/2))) dur)
    (callback (*metro* (+ beat (* .5 dur))) 'hats (+ beat dur) dur)))

(hats (*metro* 'get-beat 4) 1/4)

(define drum-seq
  (lambda (time dur)
    (play-note (now) drums *gm-closed-hi-hat* (random 70 110) (car dur))
    (play-note (now) drums *gm-kick* (random 85 110) (car dur))
    ;;(play time drums *gm-cowbell* 80 1)
    (callback (+ (now) time) 'drum-seq (car dur) (rev-rotate dur))))

