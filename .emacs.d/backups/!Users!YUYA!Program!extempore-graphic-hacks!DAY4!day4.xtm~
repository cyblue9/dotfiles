
;; DAY4
;; * draw circle
;; * draw line
;; * draw moving line

(sys:load "libs/external/glfw3.xtm")

(bind-val width float 800.)
(bind-val height float 800.)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

(sys:load "libs/external/nanovg.xtm")
(sys:load "libs/contrib/nanovg_helper.xtm")
(nvg_init)

(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

(bind-func drawGraph
  (lambda (x:float y:float w:float h:float t:float)
    (let ((samples:float* (alloc 6))
          (sx:float* (alloc 6)) (sy:float* (alloc 6))
          (dx:float (/ w 5.))
          (i:i64 0))

      (pset! samples 0 (* (+ 1. (sin (+ (* t 1.2345) (* (cos (* t 0.33457)) 0.44)))) .5))
      (pset! samples 1 (* (+ 1. (sin (+ (* t .68363) (* (cos (* t 1.3)) 1.55)))) .5))
      (pset! samples 2 (* (+ 1. (sin (+ (* t 1.1642) (* (cos (* t 0.33457)) 1.24)))) .5))
      (pset! samples 3 (* (+ 1. (sin (+ (* t .56345) (* (cos (* t 1.63)) 0.14)))) .5))
      (pset! samples 4 (* (+ 1. (sin (+ (* t 1.6245) (* (cos (* t .254)) .3)))) .5))
      (pset! samples 5 (* (+ 1. (sin (+ (* t .345) (* (cos (* t .03)) 0.6)))) .5))

      (dotimes (i 0 6)
        (pset! sx i (+ x (* (i64tof i) dx)))
        (pset! sy i (+ y (* h (pref samples i) .8))))

      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      ;; Graph backgraound

      (let ((bg:NVGpaint* (_nvgLinearGradient vg x y x (+ y h) (NVGcolor 0. 160. 192. 0.) (NVGcolor 0. 160. 192. 64.))))

      (nvgBeginPath vg)
      (nvgMoveTo vg (pref sx 0) (pref sy 0))
      (dotimes (i 1 6)
        (nvgBezierTo vg (+ (pref sx (- i 1)) (* dx .5)) (pref sy (- i 1)) (- (pref sx i) (* dx .5)) (pref sy i) (pref sx i) (pref sy i)))
      (nvgLineTo vg (+ x w) (+ w h))
      (nvgLineTo vg x (+ y h))
      (_nvgFillPaint vg bg)
      (nvgFill vg)

      ;; Graph line
      (nvgBeginPath vg)
      (nvgMoveTo vg (pref sx 0) (+ (pref sy 0) 2.))
      (dotimes (i 1 6)
        (nvgBezierTo vg (+ (pref sx (- i 1)) (* dx .5)) (+ (pref sx (- i 1)) 2.) (- (pref sx i) (* dx .5)) (+ (pref sy i) 2.) (pref sx i) (+ (pref sy i) 2.)))
      (_nvgStrokeColor vg (NVGcolor 0. 0. 0. 32.))
      (nvgStrokeWidth vg 3.)
      (nvgStroke vg)

      (nvgBeginPath vg)
      (nvgMoveTo vg (pref sx 0) (pref sy 0))
      (dotimes (i 1 6)
        (nvgBezierTo vg (+ (pref sx (- i 1)) (* dx .5)) (pref sy (- i 1)) (- (pref sx (- i 1)) (* dx .5)) (pref sy i) (pref sx i) (pref sy i)))
      (_nvgStrokeColor vg (NVGcolor 0. 160. 192. 255.))
      (nvgStrokeWidth vg 3.)
      (nvgStroke vg)
      
      ;; Graph sample pos
      (dotimes (i 0 6)
        (set! bg (_nvgRadialGradient vg (pref sx i) (+ (pref sy i) 2.) 3. 8. (NVGcolor 0. 0. 0. 32.) (NVGcolor 0. 0. 0. 0.)))
        (nvgBeginPath vg)
        (nvgRect vg (- (pref sx i) 10.) (+ (- (pref sy i) 10.) 2.) 20. 20.)
        (_nvgFillPaint vg bg)
        (nvgFill vg))

      (nvgBeginPath vg)
      (dotimes (i 0 6)
        (nvgCircle vg (pref sx i) (pref sy i) 4.))

      (_nvgFillColor vg (NVGcolor 0. 160. 192. 255.))
      (nvgFill vg)
      (nvgBeginPath vg)
      (dotimes (i 0 6)
        (nvgCircle vg (pref sx i) (pref sy i) 2.))
      
      (_nvgFillColor vg (NVGcolor 220. 220. 220. 255.))
      (nvgFill vg)

      (nvgStrokeWidth vg 1.)

            ;;
      (nvgBeginPath vg)
      (set! bg (_nvgRadialGradient vg (pref sx i) (+ (pref sy i) 2.) 3. 8. (NVGcolor 0. 0. 0. 32.) (NVGcolor 0. 0. 0. 0.)))
      (nvgRect vg 10. 10. 700. 700.)
      (_nvgFillPaint vg bg)
      (nvgFill vg)
      ;;

      (nvgEndFrame vg)))))
            
   
(bind-func drawCurve
  (lambda ()
    (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
    
    ;; (nvgBeginPath vg)
    ;; (nvgRect vg 0. 0. 500. 500.)
    ;; (nvgFillPaint vg (nvgLinearGradient vg 0. 0. 500. 500. (nvgRGBA 200 200 200 255) (nvgRGBA 200 200 200 0))) 
    ;; (nvgFill vg)
    
    (nvgBeginPath vg)
    ;;(nvgBezierTo vg 200. 400. 600. 400. 400. 200.)
    (nvgMoveTo vg 0. 400.)
    (nvgQuadTo vg 100. 200. 200. 400.)
    (nvgQuadTo vg 300. 600. 400. 400.)
    (nvgQuadTo vg 500. 200. 600. 400.)
    (nvgQuadTo vg 700. 600. 800. 400.)
    ;;(nvgLineTo vg 200. 0.)
    (nvgStrokeColor vg (nvgRGBA 200 100 200 250))
    (nvgStrokeWidth vg 3.)
    (nvgStroke vg)
    (nvgFillColor vg (nvgRGBA 220 220 220 255))
    (nvgFill vg)

    
    (nvgEndFrame vg)))

(bind-type point <float,float>)
(bind-func drawMovingCurve
  (let* ((n:i64 13)
         (points:point* (alloc n))
         (i:i64 0))
    (tfill! (pref-ptr points 0)   0. 400.)
    (tfill! (pref-ptr points 1) 100. 200.)
    (tfill! (pref-ptr points 2) 200. 400.)
    (tfill! (pref-ptr points 3) 300. 600.)
    (tfill! (pref-ptr points 4) 400. 400.)
    (tfill! (pref-ptr points 5) 500. 200.)
    (tfill! (pref-ptr points 6) 600. 400.)
    (tfill! (pref-ptr points 7) 700. 600.)
    (tfill! (pref-ptr points 8) 800. 400.)
    (tfill! (pref-ptr points 9) 900. 200.)
    (tfill! (pref-ptr points 10) 1000. 400.)
    (tfill! (pref-ptr points 11) 1100. 600.)
    (tfill! (pref-ptr points 12) 1200. 400.)
    (lambda ()
      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      (nvgBeginPath vg)(nvgEndFrame vg)
      
      (nvgMoveTo vg (tref (pref points 0) 0) (tref (pref points 0) 1))
      (dotimes (i 0 6)
        (nvgQuadTo vg (tref (pref points (+ (* 2 i) 1)) 0) (tref (pref points (+ (* 2 i) 1)) 1) (tref (pref points (+ (* 2 i) 2)) 0) (tref (pref points (+ (* 2 i) 2)) 1)))

      (_nvgStrokeColor vg (NVGcolor 200. 100. 200. 250.))
      (nvgStrokeWidth vg 3.)
      (nvgStroke vg)
      (_nvgFillColor vg (NVGcolor 220. 220. 220. 255.))
      (nvgFill vg)
      (nvgEndFrame vg)
      
      (println (pref-ptr points 0))

      (dotimes (i 0 n)
        (tset! (pref-ptr points i) 0 (+ (tref (pref-ptr points i) 0) 100.))
        (if (> (tref (pref-ptr points i) 0) width)
            (tset! (pref-ptr points i) 0 (- (tref (pref-ptr points i) 0) 1500.))
            .0:float))
      (let ((p:point* (alloc)))
        (tfill! (pref-ptr p 0) (tref (pref-ptr points 12) 0) (tref (pref-ptr points 12) 1))
        (tfill! (pref-ptr points 12) (tref (pref-ptr points 11) 0) (tref (pref-ptr points 11) 1))
        (tfill! (pref-ptr points 11) (tref (pref-ptr points 10) 0) (tref (pref-ptr points 10) 1))
        (tfill! (pref-ptr points 10) (tref (pref-ptr points 9) 0) (tref (pref-ptr points 9) 1))
        (tfill! (pref-ptr points 9) (tref (pref-ptr points 8) 0) (tref (pref-ptr points 8) 1))
        (tfill! (pref-ptr points 8) (tref (pref-ptr points 7) 0) (tref (pref-ptr points 7) 1))
        (tfill! (pref-ptr points 7) (tref (pref-ptr points 6) 0) (tref (pref-ptr points 6) 1))
        (tfill! (pref-ptr points 6) (tref (pref-ptr points 5) 0) (tref (pref-ptr points 5) 1))
        (tfill! (pref-ptr points 5) (tref (pref-ptr points 4) 0) (tref (pref-ptr points 4) 1))
        (tfill! (pref-ptr points 4) (tref (pref-ptr points 3) 0) (tref (pref-ptr points 3) 1))
        (tfill! (pref-ptr points 3) (tref (pref-ptr points 2) 0) (tref (pref-ptr points 2) 1))
        (tfill! (pref-ptr points 2) (tref (pref-ptr points 1) 0) (tref (pref-ptr points 1) 1))
        (tfill! (pref-ptr points 1) (tref (pref-ptr points 0) 0) (tref (pref-ptr points 0) 1))
        (tfill! (pref-ptr points 0) (tref (pref-ptr p 0) 0) (tref (pref-ptr p 0) 1))))))

(bind-func line
  (lambda ()
    (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
    (nvgBeginPath vg)
      
      ;; (nvgMoveTo vg 0. 0.)
      ;; (nvgLineTo vg 700. 700.)
      ;; (nvgLineTo vg 700. 0.)
      ;; (nvgLineTo vg 0. 0.)
      ;; (nvgStrokeWidth vg 15.)
      ;; (nvgStrokeColor vg (NVGcolor .5 .5 .5 1.))
      ;; (nvgStroke vg)
      ;; (nvgFillColor vg (NVGcolor .2 .0 .0 1.))
      ;; (nvgFill vg)

    (xtm_draw_tri_stroke vg 400 400 200 600 600 600
                         (nvgLinearGradient vg 400. 400. 600. 600. (NVGcolor .5  .0 .0 1.) (NVGcolor 0. 0. .5 1.)) 5)

    (xtm_draw_quad_fill vg 100 100 200 200 300 100 (NVGcolor .5 .5 .5 1.))
      ;; (nvgFillColor vg (NVGcolor 100. 100. 200. 250.))
      ;; (nvgFill vg)
      ;; (nvgStrokeColor vg (NVGcolor 0.1 0.5 .5 1.))
      ;; (nvgStrokeWidth vg 8.)
      ;; (nvgStroke vg)

      ;; (nvgBeginPath vg)
      ;; (nvgRect vg 400. 400. 200. -200.)
      ;; (nvgStrokeColor vg (NVGcolor .5 .5 .5 1.))
      ;; (nvgStrokeWidth vg 50.)
      ;; (nvgStroke vg)

      (nvgBeginPath vg)
      (nvgArc vg 600. 200. 20. (convert (* PI (/ 85. 180.))) (convert (* PI (/ 135. 180.))) 1)
      ;;(nvgStrokeColor vg xtm_cyan)
     ;; (nvgStrokeColor vg (xtm_nvgcolor2nvgcolorp (nvgRGBf .1 .1 .1)))
      (nvgStrokeWidth vg 3.)
      (nvgStroke vg)

      (xtm_draw_tri_stroke vg 400 400 200 600 600 600 xtm_green 20)
      (xtm_draw_tri_fill vg 400 400 200 600 600 600 xtm_white)
      ;;(xtm_add_bezier_stroke vg 0 0 100 600 200 100 300 300 (NVGcolor .0 .3 .2 1.) 10)
      ;;(nvgEndFrame vg)
      ;;(nvgBeginFrame vg2 (convert width) (convert height) pixel_ratio)
      ;;(xtm_add_bezier_fill   vg2 0 0 100 600 200 100 300 300 (NVGcolor .2 .2 0. 1.))
      ;;(nvgEndFrame vg2)
      (nvgBeginPath vg)
      ;;(nvgRoundedRect vg 100. 100. 300. 300. 30.)
      ;; (nvgRoundedRectVarying vg 200. 200. 300. 300. (convert (* PI (/ 95. 180.))) 10. 10. 10.)
      ;; (nvgFillColor vg (NVGcolor .7 .1 .1 1.))
      ;; (nvgFill vg)

      ;;(xtm_draw_line vg 800 100 100 800 (NVGcolor 100. 100. 200. 250.) 4)
      (nvgEndFrame vg)))

      ;(nvgBeginFrame vg2 (convert width) (convert height) pixel_ratio)
      ;;(xtm_draw_line vg 200. 200. 600. 200. xtm_red 2.)
      ;;(nvgEndFrame vg2)

(bind-func draw_circle
  (lambda ()
    (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
    (nvgBeginPath vg)
    (nvgCircle vg (/ width 2.) (/ height 2.) 20.)
    (nvgFillColor vg (NVGcolor .5 .2 .5 1.))
    (nvgFill vg)
    (nvgEndFrame vg)))

(bind-func draw_circle_loop
  (lambda ()
    (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
    (let* ((x:i64 0)
           (y:i64 0)
           (dur:i64 40)
           (n:i64 (+ (ftoi64 (/ height (i64tof dur))) 1)))
      (dotimes (y 0 n)
        (dotimes (x 0 n)
          (xtm_draw_circle_stroke vg (+ (random 0 5) (* x dur)) (+ (random 0 5) (* y dur)) dur (xtm_leaprgba (xtm_leaprgba xtm_blue xtm_magenta (* (i64tof x) (/ 1. (i64tof n)))) (xtm_leaprgba xtm_yellow xtm_green (* (i64tof x) (/ 1. (i64tof n)))) (* (i64tof y) (/ 1. (i64tof n)))) 1)))
      (nvgEndFrame vg))))

(bind-func draw_move_circle
  (let* ((divdeg:i64 30)
         (n:i64 (/ 360 divdeg))
         (i:i64 0))
    (lambda ()
      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      (nvgBeginPath vg)
      (xtm_add_rect vg 0 0 800 800)
      (nvgFillColor vg (xtm_rgba .2 .2 .2 .5))
      (nvgFill vg)

      (xtm_draw_circle_fill vg 400 400 800 (xtm_rgba 180 180 180 50))
      
      (xtm_draw_circle_fill vg 400 400 20 xtm_white)
      (xtm_draw_arc_stroke vg 400 400 400 (* i divdeg) (* (+ i 1) divdeg) 2 xtm_red 40)
      (xtm_draw_arc_stroke vg 400 400 300 (* i divdeg) (* (+ i 1) divdeg) 2 xtm_blue 40)
      (xtm_draw_arc_stroke vg 400 400 200 (* i divdeg) (* (+ i 1) divdeg) 2 xtm_yellow 40)
      (xtm_draw_arc_stroke vg 400 400 100 (* i divdeg) (* (+ i 1) divdeg) 2 xtm_magenta 40)
      
      ;;(xtm_draw_arc_stroke vg 400 400 200 0 30 2 xtm_red 40)
      (if (< i n)
          (set! i (+ i 1))
          (set! i 0))
      (nvgEndFrame vg))))
    
(bind-func nvg_draw_loop
  (lambda (time:i64 delta_t:double)
    (nvg_clear)
    ;;(draw_circle)
    ;;(draw_moving_line)
    ;;(drawMovingCurve)
    ;(draw_circle_loop)
    ;;(line)
    ;;(drawCurve)
    (draw_move_circle)
    (set! delta_t (/ 1. 10.))
    ;;(drawGraph 0. (/ height 2.) width (/ height 2.) 10.5)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time nvg_draw_loop next_time delta_t))))

(nvg_draw_loop (now) (/ 1. 30.))
;;(nvg_draw_loop (now) 1.)


;;; API over view

;; xtm_close_path
;; xtm_stroke
;; xtm_fill

;;;;
;;;;

(bind-func xtm_close_path
  (lambda (path)
    (nvgClosePath path)))

(bind-func xtm_stroke
  (lambda (path color:NVGcolor* width:i64)
    (nvgStrokeWidth path (i64tof width)) 
    (nvgStrokeColor path color)
    (nvgStroke path)))

(bind-func xtm_stroke
  (lambda (path paint:NVGpaint* width:i64)
    (nvgStrokeWidth path (i64tof width)) 
    (nvgStrokePaint path paint)
    (nvgStroke path)))

(bind-func xtm_stroke
  (lambda (path color:NVGcolor* width:float)
    (nvgStrokeWidth path width) 
    (nvgStrokeColor path color)
    (nvgStroke path)))

(bind-func xtm_stroke
  (lambda (path paint:NVGpaint* width:float)
    (nvgStrokeWidth path width) 
    (nvgStrokePaint path paint)
    (nvgStroke path)))

(bind-func xtm_fill
  (lambda (path color:NVGcolor*)
    (nvgFillColor path color)
    (nvgFill path)))

(bind-func xtm_fill
  (lambda (path paint:NVGpaint*)
    (nvgFillPaint path paint)
    (nvgFill path)))

;; convenience functions for adding shapes to path

;;img
(bind-func xt_draw_line
  (nvgbeginpath path)
  (xtm_add_line)
  (xtm_stroke))

(bind-func xtm_add_line
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64)
    (nvgMoveTo path (i64tof x1) (i64tof y1))
    (nvgLineTo path (i64tof x2) (i64tof y2))))

(bind-func xtm_add_line
  (lambda (path x1:float y1:float x2:float y2:float)
    (nvgMoveTo path x1 y1)
    (nvgLineTo path x2 y2)))

(bind-func xtm_add_tri
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64)
    (nvgMoveTo path (i64tof x1) (i64tof y1))
    (nvgLineTo path (i64tof x2) (i64tof y2))
    (nvgLineTo path (i64tof x3) (i64tof y3))
    (nvgClosePath path)))

(bind-func xtm_add_tri
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float)
    (nvgMoveTo path x1 y1)
    (nvgLineTo path x2 y2)
    (nvgLineTo path x3 y3)
    (nvgClosePath path)))

(bind-func xtm_add_bezier
  (lambda (path x1:i64 y1:i64 cx1:i64 cy1:i64 cx2:i64 cy2:i64 x2:i64 y2:i64)
    (nvgMoveTo path (i64tof x1) (i64tof y1))
    (nvgBezierTo path (i64tof cx1) (i64tof cy1) (i64tof cx2) (i64tof cy2) (i64tof x2) (i64tof y2))))

(bind-func xtm_add_bezier
  (lambda (path x1:float y1:float cx1:float cy1:float cx2:float cy2:float x2:float y2:float)
    (nvgMoveTo path x1 y1)
    (nvgBezierTo path cx1 cy1 cx2 cy2 x2 y2)))

(bind-func xtm_add_quad
  (lambda (path x1:i64 y1:i64 cx:i64 cy:i64 x2:i64 y2:i64)
    (nvgMoveTo path (i64tof x1) (i64tof y1))
    (nvgQuadTo path (i64tof cx) (i64tof cy) (i64tof x2) (i64tof y2))))

(bind-func xtm_add_quad
  (lambda (path x1:float y1:float cx:float cy:float x2:float y2:float)
    (nvgMoveTo path x1 y1)
    (nvgQuadTo path cx cy x2 y2)))

;; use nvgArcTo
(bind-func xtm_add_arc
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 rad:i64)
    (nvgMoveTo path (i64tof x1) (i64tof y1))
    (nvgArcTo path (i64tof x2) (i64tof y2) (i64tof x3) (i64tof y3) (i64tof rad))))

(bind-func xtm_add_arc
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float rad:float)
    (nvgMoveTo path x1 y1)
    (nvgArcTo path x2 y2 x3 y3 rad)))

;; use nvgArc
(bind-func xtm_add_arc
  (lambda (path cx:i64 cy:i64 r:i64 deg1:i64 deg2:i64 dir:i32)
    (nvgArc path (i64tof cx) (i64tof cy) (i64tof r) (convert (* PI (/ (i64tod deg1) 180.))) (convert (* PI (/ (i64tod deg2) 180.))) dir))) 

(bind-func xtm_add_arc
  (lambda (path cx:float cy:float r:float deg1:float deg2:float dir:i32)
    (nvgArc path cx cy r (convert (* PI (/ (ftod deg1) 180.))) (convert (* PI (/ (ftod deg2) 180.))) dir))) 

(bind-func xtm_add_rect
  (lambda (path x:i64 y:i64 w:i64 h:i64)
    (nvgRect path (i64tof x) (i64tof y) (i64tof w) (i64tof h))))

(bind-func xtm_add_rect
  (lambda (path x y w h)
    (nvgRect path x y w h)))

(bind-func xtm_add_rounded_rect
  (lambda (path x:i64 y:i64 w:i64 h:i64 r:i64)
    (nvgRoundedRect path (i64tof x) (i64tof y) (i64tof w) (i64tof h) (i64tof r))))

(bind-func xtm_add_rounded_rect
  (lambda (path x y w h r)
    (nvgRoundedRect path x y w h r)))

(bind-func xtm_add_rounded_rect_varying
  (lambda (path x:i64 y:i64 w:i64 h:i64 rad_top_left:i64 rad_top_right:i64 rad_bottom_left:i64 rad_bottom_right:i64)
    (nvgRoundedRectVarying path (i64tof x) (i64tof y) (i64tof w) (i64tof h) (i64tof rad_top_left) (i64tof rad_top_left) (i64tof rad_bottom_left) (i64tof rad_bottom_right))))

(bind-func xtm_add_rounded_rect_varying
  (lambda (path x:float y:float w:float h:float rad_top_left:float rad_top_right:float rad_bottom_left:float rad_bottom_right:float)
    (nvgRoundedRectVarying path x y w h rad_top_left rad_top_left rad_bottom_left rad_bottom_right)))

(bind-func xtm_add_ellipse
  (lambda (path cx:i64 cy:i64 rx:i64 ry:i64)
    (nvgEllipse path (i64tof cx) (i64tof cy) (i64tof rx) (i64tof ry))))

(bind-func xtm_add_ellipse
  (lambda (path cx:float cy:float rx:float ry:float)
    (nvgEllipse path cx cy rx ry)))

(bind-func xtm_add_circle
  (lambda (path cx:i64 cy:i64 r:i64)
    (nvgCircle path (i64tof cx) (i64tof cy) (i64tof r))))

(bind-func xtm_add_circle
  (lambda (path cx:float cy:float r:float)
    (nvgCircle path cx cy r)))

;; (bind-func xtm_draw_polyd

;; higher-level path drawing with xtlang closures

(bind-func xtm_draw_line
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_line path x1 y1 x2 y2)
    (xtm_stroke path color width)))

(bind-func xtm_draw_line
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_line path x1 y1 x2 y2)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_line
  (lambda (path x1:float y1:float x2:float y2:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_line path x1 y1 x2 y2)
    (xtm_stroke path color width)))

(bind-func xtm_draw_line
  (lambda (path x1:float y1:float x2:float y2:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_line path x1 y1 x2 y2)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_tri_stroke
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_stroke path color width)))

(bind-func xtm_draw_tri_stroke
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_tri_stroke
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_stroke path color width)))

(bind-func xtm_draw_tri_stroke
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_tri_fill
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_fill path color)))

(bind-func xtm_draw_tri_fill
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_fill path paint)))

(bind-func xtm_draw_tri_fill
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_fill path color)))

(bind-func xtm_draw_tri_fill
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_tri path x1 y1 x2 y2 x3 y3)
    (xtm_fill path paint)))

(bind-func xtm_draw_bezier_stroke
  (lambda (path x1:i64 y1:i64 cx1:i64 cy1:i64 cx2:i64 cy2:i64 x2:i64 y2:i64 color:NVGcolor* width:i64)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_stroke path color width)))

(bind-func xtm_draw_bezier_stroke
  (lambda (path x1:i64 y1:i64 cx1:i64 cy1:i64 cx2:i64 cy2:i64 x2:i64 y2:i64 paint:NVGpaint* width:i64)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_stroke path paint width)))

(bind-func xtm_draw_bezier_stroke
  (lambda (path x1:float y1:float cx1:float cy1:float cx2:float cy2:float x2:float y2:float color:NVGcolor* width:float)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_stroke path color width)))

(bind-func xtm_draw_bezier_stroke
  (lambda (path x1:float y1:float cx1:float cy1:float cx2:float cy2:float x2:float y2:float paint:NVGpaint* width:float)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_stroke path paint width)))

(bind-func xtm_draw_bezier_fill
  (lambda (path x1:i64 y1:i64 cx1:i64 cy1:i64 cx2:i64 cy2:i64 x2:i64 y2:i64 color:NVGcolor*)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_fill path color)))

(bind-func xtm_draw_bezier_fill
  (lambda (path x1:i64 y1:i64 cx1:i64 cy1:i64 cx2:i64 cy2:i64 x2:i64 y2:i64 paint:NVGpaint*)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_fill path paint)))

(bind-func xtm_draw_bezier_fill
  (lambda (path x1:float y1:float cx1:float cy1:float cx2:float cy2:float x2:float y2:float color:NVGcolor*)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_fill path color)))

(bind-func xtm_draw_bezier_fill
  (lambda (path x1:float y1:float cx1:float cy1:float cx2:float cy2:float x2:float y2:float paint:NVGpaint*)
  (nvgBeginPath path)
  (xtm_add_bezier path x1 y1 cx1 cy1 cx2 cy2 x2 y2)
  (xtm_fill path paint)))

(bind-func xtm_draw_quad_stroke
  (lambda (path x1:i64 y1:i64 cx:i64 cy:i64 x2:i64 y2:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_stroke path color width)))

(bind-func xtm_draw_quad_stroke
  (lambda (path x1:i64 y1:i64 cx:i64 cy:i64 x2:i64 y2:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_quad_stroke
  (lambda (path x1:float y1:float cx:float cy:float x2:float y2:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_stroke path color width)))

(bind-func xtm_draw_quad_stroke
  (lambda (path x1:float y1:float cx:float cy:float x2:float y2:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_quad_fill
  (lambda (path x1:i64 y1:i64 cx:i64 cy:i64 x2:i64 y2:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_fill path color)))

(bind-func xtm_draw_quad_fill
  (lambda (path x1:i64 y1:i64 cx:i64 cy:i64 x2:i64 y2:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_fill path paint)))

(bind-func xtm_draw_quad_fill
  (lambda (path x1:float y1:float cx:float cy:float x2:float y2:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_fill path color)))

(bind-func xtm_draw_quad_fill
  (lambda (path x1:float y1:float cx:float cy:float x2:float y2:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_quad path x1 y1 cx cy x2 y2)
    (xtm_fill path paint)))

;; use nvgArcTo
(bind-func xtm_draw_arc_stroke
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 rad:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_stroke path color width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 rad:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float rad:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_stroke path color width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float rad:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_arc_fill
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 rad:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_fill path color)))

(bind-func xtm_draw_arc_fill
  (lambda (path x1:i64 y1:i64 x2:i64 y2:i64 x3:i64 y3:i64 rad:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_fill path paint)))

(bind-func xtm_draw_arc_fill
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float rad:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_fill path color)))

(bind-func xtm_draw_arc_fill
  (lambda (path x1:float y1:float x2:float y2:float x3:float y3:float rad:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_arc path x1 y1 x2 y2 x3 y3 rad)
    (xtm_fill path paint)))

;; use nvgArc
(bind-func xtm_draw_arc_stroke
  (lambda (path cx:i64 cy:i64 r:i64 deg1:i64 deg2:i64 dir:i32 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_stroke path color width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path cx:i64 cy:i64 r:i64 deg1:i64 deg2:i64 dir:i32 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path cx:float cy:float r:float deg1:float deg2:float dir:i32 color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_stroke path color width)))

(bind-func xtm_draw_arc_stroke
  (lambda (path cx:float cy:float r:float deg1:float deg2:float dir:i32 paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_arc_fill
  (lambda (path cx:i64 cy:i64 r:i64 deg1:i64 deg2:i64 dir:i32 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_fill path color)))

(bind-func xtm_draw_arc_fill
  (lambda (path cx:i64 cy:i64 r:i64 deg1:i64 deg2:i64 dir:i32 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_fill path paint)))

(bind-func xtm_draw_arc_fill
  (lambda (path cx:float cy:float r:float deg1:float deg2:float dir:i32 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_fill path color)))

(bind-func xtm_draw_arc_fill
  (lambda (path cx:float cy:float r:float deg1:float deg2:float dir:i32 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_arc path cx cy r deg1 deg2 dir)
    (xtm_fill path paint)))

(bind-func xtm_add_rect_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_stroke path color width)))

(bind-func xtm_add_rect_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_stroke path paint width)))

(bind-func xtm_add_rect_stroke
  (lambda (path x:float y:float w:float h:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_stroke path color width)))

(bind-func xtm_add_rect_stroke
  (lambda (path x:float y:float w:float h:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_stroke path paint width)))

(bind-func xtm_add_rect_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_fill path color)))

(bind-func xtm_add_rect_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_fill path paint)))

(bind-func xtm_add_rect_fill
  (lambda (path x:float y:float w:float h:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_fill path color)))

(bind-func xtm_add_rect_fill
  (lambda (path x:float y:float w:float h:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rect path x y w h)
    (xtm_fill path paint)))

(bind-func xtm_add_rounded_rect_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 r:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_stroke path color width)))

(bind-func xtm_add_rounded_rect_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 r:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_stroke path paint width)))

(bind-func xtm_add_rounded_rect_stroke
  (lambda (path x:float y:float w:float h:float r:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_stroke path color width)))

(bind-func xtm_add_rounded_rect_stroke
  (lambda (path x:float y:float w:float h:float r:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_stroke path paint width)))

(bind-func xtm_add_rounded_rect_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 r:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_fill path color)))

(bind-func xtm_add_rounded_rect_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 r:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_fill path paint)))

(bind-func xtm_add_rounded_rect_fill
  (lambda (path x:float y:float w:float h:float r:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_fill path color)))

(bind-func xtm_add_rounded_rect_fill
  (lambda (path x:float y:float w:float h:float r:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect path x y w h r)
    (xtm_fill path paint)))

(bind-func xtm_draw_rounded_rect_varying_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 rad_top_left:i64 rad_top_right:i64 rad_bottom_left:i64 rad_bottom_right:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_stroke path color width)))

(bind-func xtm_draw_rounded_rect_varying_stroke
  (lambda (path x:i64 y:i64 w:i64 h:i64 rad_top_left:i64 rad_top_right:i64 rad_bottom_left:i64 rad_bottom_right:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_rounded_rect_varying_stroke
  (lambda (path x:float y:float w:float h:float rad_top_left:float rad_top_right:float rad_bottom_left:float rad_bottom_right:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_stroke path color width)))

(bind-func xtm_draw_rounded_rect_varying_stroke
  (lambda (path x:float y:float w:float h:float rad_top_left:float rad_top_right:float rad_bottom_left:float rad_bottom_right:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_rounded_rect_varying_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 rad_top_left:i64 rad_top_right:i64 rad_bottom_left:i64 rad_bottom_right:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_fill path color)))

(bind-func xtm_draw_rounded_rect_varying_fill
  (lambda (path x:i64 y:i64 w:i64 h:i64 rad_top_left:i64 rad_top_right:i64 rad_bottom_left:i64 rad_bottom_right:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_fill path paint)))

(bind-func xtm_draw_rounded_rect_varying_fill
  (lambda (path x:float y:float w:float h:float rad_top_left:float rad_top_right:float rad_bottom_left:float rad_bottom_right:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_fill path color)))

(bind-func xtm_draw_rounded_rect_varying_fill
  (lambda (path x:float y:float w:float h:float rad_top_left:float rad_top_right:float rad_bottom_left:float rad_bottom_right:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_rounded_rect_varying path x y w h rad_top_left rad_top_right rad_bottom_left rad_bottom_right)
    (xtm_fill path paint)))

(bind-func xtm_draw_ellipse_stroke
  (lambda (path cx:i64 cy:i64 rx:i64 ry:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_stroke path color width)))

(bind-func xtm_draw_ellipse_stroke
  (lambda (path cx:i64 cy:i64 rx:i64 ry:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_ellipse_stroke
  (lambda (path cx:float cy:float rx:float ry:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_stroke path color width)))

(bind-func xtm_draw_ellipse_stroke
  (lambda (path cx:float cy:float rx:float ry:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_ellipse_fill
  (lambda (path cx:i64 cy:i64 rx:i64 ry:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_fill path color)))

(bind-func xtm_draw_ellipse_fill
  (lambda (path cx:i64 cy:i64 rx:i64 ry:i64 paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_fill path paint)))

(bind-func xtm_draw_ellipse_fill
  (lambda (path cx:float cy:float rx:float ry:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_fill path color)))

(bind-func xtm_draw_ellipse_fill
  (lambda (path cx:float cy:float rx:float ry:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_ellipse path cx cy rx ry)
    (xtm_fill path paint)))

(bind-func xtm_draw_circle_stroke
  (lambda (path cx:i64 cy:i64 r:i64 color:NVGcolor* width:i64)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_stroke path color width)))

(bind-func xtm_draw_circle_stroke
  (lambda (path cx:i64 cy:i64 r:i64 paint:NVGpaint* width:i64)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_circle_stroke
  (lambda (path cx:float cy:float r:float color:NVGcolor* width:float)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_stroke path color width)))

(bind-func xtm_draw_circle_stroke
  (lambda (path cx:float cy:float r:float paint:NVGpaint* width:float)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_stroke path paint width)))

(bind-func xtm_draw_circle_fill
  (lambda (path cx:i64 cy:i64 r:i64 color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_fill path color)))

(bind-func xtm_draw_circle_fill
  (lambda (path cx:i64 cy:i64 r:i64 paint:NVGpaint*)
    (nvgBegccinPath path)
    (xtm_add_circle path cx cy r)
    (xtm_fill path paint)))

(bind-func xtm_draw_circle_fill
  (lambda (path cx:float cy:float r:float color:NVGcolor*)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_fill path color)))

(bind-func xtm_draw_circle_fill
  (lambda (path cx:float cy:float r:float paint:NVGpaint*)
    (nvgBeginPath path)
    (xtm_add_circle path cx cy r)
    (xtm_fill path paint)))

;; color

(bind-func xtm_nvgcolor2nvgcolorp
  (lambda (color:NVGcolor)
    (let ((color_p:NVGcolor* (alloc)))
      ;;(println (pref-ptr color_p 0))
      (tset! color_p 0 (tref color 0))
      ;;(println (tref color 2))
      (tset! color_p 1 (tref color 1))
      (tset! color_p 2 (tref color 2))
      (tset! color_p 3 (tref color 3))
      ;;(println color_p)
      ;;(tref-ptr color 0)
      color_p)))


(define ab
  (+ 1 1))
(ab)
(bind-val ac NVGcolor <1.,2.,3.,4.>)
(bind-val ae NVGcolor*)
(call-as-xtlang
 ;;(tfill! ac 1. 2. 3. 4.)
 (pset! ae (alloc))
 (tfill! ae 1. 2. 3. 4.)
 (println (tref ac 3))
 (xtm_nvgcolor2nvgcolorp ae))

;;(bind-type NVGcolor <float,float,float,float>)



(bind-func xtm_rgba
  (lambda (r:i64 g:i64 b:i64 a:i64)
    (NVGcolor (/ (i64tof r) 255.) (/ (i64tof b) 255.) (/ (i64tof b) 255.) (/ (i64tof a) 255.))))

(bind-func xtm_rgba
  (lambda (r:float g:float b:float a:float)
    (NVGcolor r g b a)))

(bind-func xtm_rgb
  (lambda (r:i64 g:i64 b:i64)
    (xtm_rgba r g b 255)))

(bind-func xtm_rgb
  (lambda (r:float g:float b:float)
    (xtm_rgba r g b 1.)))

(bind-func xtm_transrba
  (lambda (color:NVGcolor* a:i64)
    (tset! color 3 (/ (i64tof a) 255.))
    color))

(bind-func xtm_transrba
  (lambda (color:NVGcolor* a:float)
    (tset! color 3 a)
    color))

(bind-func xtm_clampf
  (lambda (a:float mn:float mx:float)
    (cond ((< a mn) mn)
          ((> a mx) mx)
          (#t a))))

(bind-func xtm_leaprgba
  (lambda (c1:NVGcolor* c2:NVGcolor* u:float)
    (let ((cint:NVGcolor* (alloc))
          (oneminu:float 0.)
          (i:i64 0))
      (set! u (xtm_clampf u 0. 1.))
      (set! oneminu (- 1. u))
      (tset! cint 0 (+ (* (tref c1 0) oneminu) (* (tref c2 0) u)))
      (tset! cint 1 (+ (* (tref c1 1) oneminu) (* (tref c2 1) u)))
      (tset! cint 2 (+ (* (tref c1 2) oneminu) (* (tref c2 2) u)))
      (tset! cint 3 (+ (* (tref c1 3) oneminu) (* (tref c2 3) u)))
      cint)))
      











(bind-val xtm_black NVGcolor* (xtm_rgb 0 0 0))
(bind-val xtm_white NVGcolor* (xtm_rgb 255 255 255))
(bind-val xtm_red NVGcolor* (xtm_rbg 255 0 0))
(bind-val xtm_green NVGcolor* (xtm_rgb 0 255 0))
(bind-val xtm_blue NVGcolor* (xtm_rgb 0 0 255))
(bind-val xtm_yellow NVGcolor* (xtm_rgb 255 255 0))
(bind-val xtm_cyan NVGcolor* (xtm_rgb 0 255 255))
(bind-val xtm_magenta NVGcolor* (xtm_rgb 255 0 255))

(bind-type hoge3 <float,float>)
(xtm_red)
(bind-val hoge1 <float,float,float,float>)
(call-as-xtlang
 (println (tref (NVGcolor .2 .2 .2 1.) 0))
 (println (hoge3 1. 1.))
 (println (nvgRGB 4 4 4)))
 (tfill! hoge1 (nvgRGB 3 3 3)))
